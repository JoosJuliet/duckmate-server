#!/usr/bin/env node

/**
 * Module dependencies.
 */


var createServer = require("auto-sni");

/*
   var server = createServer({
email: "saven7788@gmail.com", // Emailed when certificates expire. 
agreeTos: true, // Required for letsencrypt. 
debug: true, // Add console messages and uses staging LetsEncrypt server. (Disable in production) 
domains:  ["defflee.com", "www.defflee.com"], // List of accepted domain names. (You can use nested arrays to register bundles with LE). 
ports: {
http: 8080, // Optionally override the default http port. 
https: 443 // // Optionally override the default https port. 
}
});

// Server is a "https.createServer" instance. 
server.once("listening", ()=> {
console.log("We are ready to go.");
});
 */





process.on('uncaughtException', function (err) {
	//예상치 못한 예외 처리
	console.log('uncaughtException 발생 : ' + err);
});





var app = require('../app');
var debug = require('debug')('test01:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '7000');

console.log("port is"+ port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
